[use]
plugin = basics

[JSONParse]

[assign]
path = fields0
value = fix([{ name: "wfzr", format: { name: "istex" }, label: "Cette ressource dans ISTEX" }])

path = labels0
value = fix(["Cette ressource dans ISTEX"])

path = context0
value = fix({ link: "https://data.istex.fr/ontology/istex#subjectWos" })

[env]
path = fields
value = get('fields0')

path = labels
value = get('labels0')

path = linked
value = link

path = context
value = get('context0')

; [JSONString]

; If you have a `.jsonallvalue` lodex export, and you want to redirect it to
; another exporter (say `exporters/extended-nquads.ini`), you have to modify the
; `export.jsonallvalue` structure to make it similar to what LODEX gives to the
; exporter:

; ```bash
; cat export.jsonallvalue | fx '.map(doc => doc.fields.map(field => { if (field.name === "_id") { field.name = "uri"; field.value = doc.uri } return field }  ))' '.map(doc => doc.reduce((o, field) => ({ ...o, [field.name]: field.value }), {}) )' > export.json
; ```

; Then you can use `test-exporter-wos.ini`, that looks like:

; ```ini
; [use]
; plugin = basics

; [JSONParse]

; [assign]
; path = fields0
; value = fix([{ name: "wfzr", format: { name: "istex" }, label: "Cette ressource dans ISTEX" }])

; path = labels0
; value = fix(["Cette ressource dans ISTEX"])

; path = context0
; value = fix({ link: "https://data.istex.fr/ontology/istex#subjectWos" })

; [env]
; path = fields
; value = get('fields0')

; path = labels
; value = get('labels0')

; path = linked
; value = link

; path = context
; value = get('context0')

; ; [JSONString]
; ```

; To be adapted to the LODEX instance configuration and model (fields name, label, context, link, ...).

; Usage:

; ```bash
; npx ezs ./test-exporter-wos.ini ./exporters/extended-nquads.ini < export.json
; ```
