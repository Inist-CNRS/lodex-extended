prepend = delegate?file=../worker.ini
mimeType = application/json
label = istex-facet

[use]
plugin = analytics
plugin = lodex

[buildContext]

; On garde dans l'environnement quelques paramètres
[env]
path = minValue
value = get('minValue').parseInt().defaultTo(0)

path = maxValue
value = get('maxValue').parseInt().defaultTo(1000000)

path = maxSize
value = get('maxSize').parseInt().defaultTo(10)

path = reverse
value = get('orderBy').split('/').get(1).replace('asc', 0).replace('desc', 1).parseInt()

path = tuneBy
value = get('orderBy').split('/').get(0).replace('_id', 'id')

[replace]
path = q
value = *

path = facet
value = env('field.0').replace(/(.*)/, '$1[*]')

path = size
value = 0

[URLStream]
url = https://api.istex.fr/document/
path = env('field.0').replace(/(.*)/, 'aggregations.$1.buckets.*')

[replace]
path = id
value = get('key')

path = value
value = get('docCount')


; On filtre les valeurs minimales
[greater]
than = env('minValue')

; On filtre les valeurs minimales
[less]
than = env('maxValue')

; On calcul un score pour permettre le tri
[tune]
path = env('tuneBy', 'value')

; On tri
[sort]
reverse = env('reverse')

; On garde uniqument les valeurs (donc on supprime les informations qui ont permis le tri)
[value]

; On envoit au client uniquement les premiers documents
[slice]
start = 1
size = env('maxSize')

; On prépare le json de sortie
[replace]
path = _id
value = get('id')

path = value
value = get('value')

path = maxSize
value = env('maxSize')

path = minValue
value = env('minValue')

path = maxValue
value = env('maxValue')

# On génére le json de sortie
[LodexOutput]
indent = true
extract = total
extract = maxSize
extract = maxValue
extract = minValue
