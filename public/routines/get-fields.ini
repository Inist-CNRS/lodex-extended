# get content of both fields given as parameters
# the first one as _id
# the seconde one as value

# Test: npx ezs init.ini run.ini < examples/vdlodex-get-fields.json| jq

prepend = delegate?file=../worker.ini
mimeType = application/json
label = get-fields

[use]
plugin = basics
plugin = lodex
plugin = analytics
plugin = storage

; On garde dans l'environnement quelques paramètres
[env?single]

path = minValue
value = env('minValue').parseInt().defaultTo(0)

path = maxValue
value = env('maxValue').parseInt().defaultTo(1000000)

path = maxSize
value = env('maxSize').parseInt().defaultTo(10)

path = reverse
value = env('orderBy').split('/').get(1).replace('asc', 0).replace('desc', 1).parseInt()

path = tuneBy
value = env('orderBy').split('/').get(0).replace('_id', 'id')

; On récupére les documents filtrés
[LodexRunQuery]

; On supprime les infos inutiles
[filterVersions]
[filterContributions]

# On envoie au client uniquement les premiers documents
[slice]
start = 1
size = env('maxSize')

[assign]
path = _id_field
value = env('field.0')

path = value_field
value = env('field.1')

# On filtre les valeurs minimales
[greater]
than = env('minValue')

# On filtre les valeurs maximales
[less]
than = env('maxValue')

# Remplace la ressource par les deux champs en paramètres
# en utilisant _id et value
[replace]
path = _id
value = get(_.get(self, '_id_field'))

path = value
value = get(_.get(self, 'value_field'))

####### début du tri ############
# On calcule un score de tri
[tune]
path = env('tuneBy', 'value')

# On inverse éventuellement l'ordre
[sort]
reverse = env('reverse')

# On garde uniquement les valeurs (en supprimant les informations stockées dans
# id, qui ont permis le tri)
[value]
##########fin du tri ############

# Génération du JSON
[LodexOutput]
indent = true
