append = dump
label = json-conditor

# load some plugins to activate some statements
[use]
plugin = basics

# Toggle ezs traces (see server stderr log)
[debug]
ezs = false

[JSONParse]
separator = *

[replace]

path = abstract en
value = get('abstract.en')

path = abstract fr
value = get('abstract.fr')

path = articleNumber
value = get('articleNumber')

path = arxiv
value = get('arxiv')

path = authors affiliations address
value = get('authors').map(function (author) { return author.affiliations.map(function(affiliation) { return affiliation.address; }); })

path = authors affiliations idRef
value = get('authors').map(function (author) { return author.affiliations.map(function(affiliation) { return affiliation.idRef; }); })

path = authors affiliations isni
value = get('authors').map(function (author) { return author.affiliations.map(function(affiliation) { return affiliation.isni; }); })

path = authors affiliations ref
value = get('authors').map(function (author) { return author.affiliations.map(function(affiliation) { return affiliation.ref; }); })

path = authors affiliations rnsr
value = get('authors').map(function (author) { return author.affiliations.map(function(affiliation) { return affiliation.rnsr; }); })

path = authors enrichments idHal
value = get('authors').map('enrichments.idHal')

path = authors enrichments idRef
value = get('authors').map('enrichments.idRef')

path = authors enrichments idRef
value = get('authors').map('enrichments.idRef')

path = authors enrichments orcId
value = get('authors').map('enrichments.orcId')

path = authors enrichments orcId
value = get('authors').map('enrichments.orcId')

path = authors forename & authors surname
value = get('authors').map(function (author) { return author.forename + " " + author.surname; })

path = authors halAuthorId
value = get('authors').map(function (author) { return author.halAuthorId; })

path = authors idHal
value = get('authors').map(function (author) { return author.idHal; })

path = authors idRef
value = get('authors').map(function (author) { return author.idRef; })

path = authors isni
value = get('authors').map(function (author) { return author.isni; })

path = authors orcId
value = get('authors').map(function (author) { return author.orcId; })

path = authors researcherId
value = get('authors.researcherId')

path = authors viaf
value = get('authors.viaf')

path = bibCode
value = get('bibCode')

path = cern
value = get('cern')

path = classification dewey
value = get('classification.dewey')

path = classification hal
value = get('classification.hal')

path = classification tef
value = get('classification.tef')

path = classification thesisDomain
value = get('classification.thesisDomain')

path = creationDate
value = get('creationDate')

path = defenseOrganisms associatedLaboratory
value = get('defenseOrganisms').map('associatedLaboratory')

path = defenseOrganisms associatedLaboratoryIdRef
value = get('defenseOrganisms').map('associatedLaboratoryIdRef')

path = defenseOrganisms degreeGrantor
value = get('defenseOrganisms').map('degreeGrantor')

path = defenseOrganisms degreeGrantorIdRef
value = get('defenseOrganisms').map('degreeGrantorIdRef')

path = defenseOrganisms doctoralSchool
value = get('defenseOrganisms').map('doctoralSchool')

path = defenseOrganisms doctoralSchoolIdRef
value = get('defenseOrganisms').map('doctoralSchoolIdRef')

path = documentType
value = get('documentType')

path = doi
value = get('doi')

path = provider
value = get('doi').split('/').head()

path = duplicateRules
value = get('duplicateRules')

path = duplicates sourceUid
value = get('duplicates').map('sourceUid')

path = duplicates source
value = get('duplicates').map('source')

path = eisbn
value = get('eisbn')

path = eissn
value = get('eissn')

path = electronicPublicationDate
value = get('electronicPublicationDate')

path = enrichments classifications bso
value = get('enrichments.classifications.bso')

path = enrichments classifications scienceMetrix
value = get('enrichments.classifications.scienceMetrix')

path = enrichments classifications scopus
value = get('enrichments.classifications.scopus')

path = enrichments oa core
value = get('enrichments.oa.core')

path = enrichments oa core
value = get('enrichments.oa.core')

path = enrichments oa unpaywall
value = get('enrichments.oa.unpaywall')

path = enrichments oa unpaywall
value = get('enrichments.oa.unpaywall')

path = ensam
value = get('ensam')

path = fulltextPath
value = get('fulltextPath')

path = funders fullname
value = get('funders').map('fullname')

path = funders grantNumber
value = get('funders').map('grantNumber')

path = halId
value = get('halId')

path = hasDoi
value = get('hasDoi')

path = hasFulltext
value = get('hasFulltext')

path = hasTransDuplicate
value = get('hasTransDuplicate')

path = idChain
value = get('idChain')

path = idConditor
value = get('idConditor')

path = idProdinra
value = get('idProdinra')

path = ineris
value = get('ineris')

path = inspire
value = get('inspire')

path = ird
value = get('ird')

path = irstea
value = get('irstea')

path = isbn
value = get('isbn')

path = isDeduplicable
value = get('isDeduplicable')

path = isDuplicate
value = get('isDuplicate')

path = isNearDuplicate
value = get('isNearDuplicate')

path = issn
value = get('issn')

path = issue
value = get('issue')

path = keywords en author
value = get('keywords.en.author')

path = keywords en mesh
value = get('keywords.en.mesh')

path = keywords fr author
value = get('keywords.fr.author')

path = keywords fr mesh
value = get('keywords.fr.mesh')

path = keywords fr rameau
value = get('keywords.fr.rameau')

path = keywords undetermined author
value = get('keywords.undetermined.author')

path = language
value = get('language')

path = localRef
value = get('localRef')

path = meetingAbstractNumber
value = get('meetingAbstractNumber')

path = nearDuplicates sourceUid
value = get('nearDuplicates').map('sourceUid')

path = nearDuplicates source
value = get('nearDuplicates').map('source')

path = nearDuplicatesDetectedBySimilarity sourceUid
value = get('nearDuplicatesDetectedBySimilarity').map('sourceUid')

path = nearDuplicatesDetectedBySimilarity source
value = get('nearDuplicatesDetectedBySimilarity').map('source')

path = nnt
value = get('nnt')

path = oatao
value = get('oatao')

path = okina
value = get('okina')

path = otherNumber
value = get('otherNumber')

path = pageRange
value = get('pageRange')

path = part
value = get('part')

path = patentNumber
value = get('patentNumber')

path = path
value = get('path')

path = pii
value = get('pii')

path = pmc
value = get('pmc')

path = pmId
value = get('pmId')

path = ppn
value = get('ppn')

path = publicationDate
value = get('publicationDate')

path = publisher
value = get('publisher')

path = reportNumber
value = get('reportNumber')

path = sciencespo
value = get('sciencespo')

path = sessionName
value = get('sessionName')

path = source
value = get('source')

path = sourceId
value = get('sourceId')

path = sourceUid
value = get('sourceUid')

path = specialIssue
value = get('specialIssue')

path = supplement
value = get('supplement')

path = thesisAdvisor forename
value = get('thesisAdvisor').map('forename')

path = thesisAdvisor idRef
value = get('thesisAdvisor').map('idRef')

path = thesisAdvisor surname
value = get('thesisAdvisor').map('surname')

path = title default
value = get('title.default')

path = title en
value = get('title.en')

path = title fr
value = get('title.fr')

path = title journal
value = get('title.journal')

path = title meeting
value = get('title.meeting')

path = title monography
value = get('title.monography')

path = typeConditor
value = get('typeConditor')

path = utKey
value = get('utKey')

path = volume
value = get('volume')

# Ensures that each object contains an identification key (required by lodex)
[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]

# Prevent keys from containing dot path notation (which is forbidden by nodejs mongoDB driver)
[OBJFlatten]
separator = fix('.')
reverse = true
safe = true

# Ensures that each object contains the same keys
[OBJStandardize]

# Uncomment to see each data sent to the database
#[debug]
