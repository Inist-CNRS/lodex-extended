append = dump
label = json-istex

[use]
plugin = basics
plugin = lodex
plugin = storage

[JSONParse]
separator = *

[replace]
path = abstract en
value = get("abstract.en", "")

path = abstract fr
value = get("abstract.fr", "")

path = articleNumber
value = get("articleNumber", "")

path = arxiv
value = get("arxiv", "")

path = authors affiliations address
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function(affiliation) { return affiliation.address ? [affiliation.address] : []; }) : []; })

path = authors affiliations idRef
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function(affiliation) { return affiliation.idRef ? [affiliation.idRef] : []; }) : []; })

path = authors affiliations isni
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function(affiliation) { return affiliation.isni ? [affiliation.isni] : []; }) : []; })

path = authors affiliations ref
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function(affiliation) { return affiliation.ref ? [affiliation.ref] : []; }) : []; })

path = authors affiliations rnsr
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function(affiliation) { return affiliation.rnsr ? [affiliation.rnsr] : []; }) : []; })

path = authors enrichments idHal
value = get('authors', []).flatMap(function (author) { return author.enrichments ? _.castArray(author.enrichments).flatMap(function(enrichment) { return enrichment.idHal ? [enrichment.idHal] : []; }) : []; })

path = authors enrichments idRef
value = get('authors', []).flatMap(function (author) { return author.enrichments ? _.castArray(author.enrichments).flatMap(function(enrichment) { return enrichment.idRef ? [enrichment.idRef] : []; }) : []; })

path = authors enrichments orcId
value = get('authors', []).flatMap(function (author) { return author.enrichments ? _.castArray(author.enrichments).flatMap(function(enrichment) { return enrichment.orcId ? [enrichment.orcId] : []; }) : []; })

path = authors forename & authors surname
value = get('authors', []).map(function (author) { return author.fullname; })

path = authors halAuthorId
value = get('authors', []).flatMap(function (author) { return author.halAuthorId ? [author.halAuthorId] : []; }).flatten()

path = authors idHal
value = get('authors', []).flatMap(function (author) { return author.idHal ? [author.idHal] : []; }).flatten()

path = authors idRef
value = get('authors', []).flatMap(function (author) { return author.idRef ? [author.idRef] : []; }).flatten()

path = authors isni
value = get('authors', []).flatMap(function (author) { return author.isni ? [author.isni] : []; }).flatten()

path = authors orcId
value = get('authors', []).flatMap(function (author) { return author.orcId ? [author.orcId] : []; }).flatten()

path = authors researcherId
value = get('authors', []).flatMap(function (author) { return author.researcherId ? [author.researcherId] : []; }).flatten()

path = authors viaf
value = get('authors', []).flatMap(function (author) { return author.viaf ? [author.viaf] : []; }).flatten()

path = bibCode
value = get("bibCode", "")

path = cern
value = get("cern", "")

path = documentType
value = get("originalGenre", "")

path = doi
value = get("doi", "")

path = duplicates source
value = get("origins.sources", [])

path = duplicates sourceUid
value = get("sourceUids", [])

path = eisbn
value = get("host.eisbn", "")

path = eissn
value = get("host.eissn", "")

path = electronicPublicationDate
value = get("host.electronicPublicationDate", "")

path = enrichments classifications hal
value = get("classifications.enrichments.hal", {})

path = enrichments oa unpaywall
value = get("enrichments.openAccess.unpaywall", {})

path = fulltextUrl
value = get("fulltextUrl", "")

path = funders grantNumber
value = get("funders", []).map(f => f.grantNumber)

path = funders name
value = get("funders", []).map(f => f.name)

path = hasDoi
value = get("doi", "").thru(Boolean)

path = hasFulltext
value = get("fulltextUrl", "").thru(Boolean)

path = issn
value = get("host.issn", "")

path = issue
value = get("host.issue", "")

path = keywords en author
value = get("keywords.en.author", [])

path = keywords en mesh
value = get("keywords.en.mesh", [])

path = keywords fr author
value = get("keywords.fr.author", [])

path = keywords fr mesh
value = get("keywords.fr.mesh", [])

path = keywords fr rameau
value = get("keywords.fr.rameau", [])

path = keywords undetermined author
value = get("keywords.und.author", [])

path = language
value = get("host.language", [])

path = otherNumber
value = get("host.otherNumber", "")

path = pageRange
value = get("host.pages").castArray().flatMap(page => page && page.range ? [page.range] : [])

path = pii
value = get("pii", "")

path = pmId
value = get("pmId", "")

path = publicationDate
value = get("host.publicationDate", "")

path = specialIssue
value = get("host.specialIssue", "")

path = supplement
value = get("host.supplement", "")

path = title default
value = get("title.default", "")

path = title en
value = get("title.en", "")

path = title fr
value = get("title.fr", "")

path = title source
value = get("host.title", "")

path = title meeting
value = get("host.conference.name", "")

path = volume
value = get("host.volume", "")

[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]
