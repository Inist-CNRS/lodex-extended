append = dump
label = json-conditor-2

[use]
plugin = basics
plugin = lodex
plugin = storage

[JSONParse]
separator = *

[replace]
path = abstract en
value = get("abstract.en", "")

path = abstract fr
value = get("abstract.fr", "")

path = articleNumber
value = get("articleNumber", "")

path = arxiv
value = get("arxiv", "")

path = authors affiliations address
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function (affiliation) { return affiliation.address ? [affiliation.address] : []; }) : []; })

path = authors affiliations idRef
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function (affiliation) { return affiliation.idRef ? [affiliation.idRef] : []; }) : []; })

path = authors affiliations isni
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function (affiliation) { return affiliation.isni ? [affiliation.isni] : []; }) : []; })

path = authors affiliations ref
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function (affiliation) { return affiliation.ref ? [affiliation.ref] : []; }) : []; })

path = authors affiliations rnsr initial
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function (affiliation) { return affiliation.rnsr ? affiliation.rnsr : []; }) : []; })

path = authors affiliations rnsr enrichments
value = get('authors', []).map(function (author) { return author.affiliations ? author.affiliations.flatMap(function (affiliation) { return affiliation.enrichments && affiliation.enrichments.rnsr ? affiliation.enrichments.rnsr : []; }) : [] })

path = authors affiliations rnsr notice unifiÃ©e
value = get("authors", []).map(author => author.rnsr || [] )

path = authors enrichments idHal
value = get('authors', []).flatMap(function (author) { return author.enrichments ? _.castArray(author.enrichments).flatMap(function (enrichment) { return enrichment.idHal ? [enrichment.idHal] : []; }) : []; })

path = authors enrichments idRef
value = get('authors', []).flatMap(function (author) { return author.enrichments ? _.castArray(author.enrichments).flatMap(function (enrichment) { return enrichment.idRef ? [enrichment.idRef] : []; }) : []; })

path = authors enrichments orcId
value = get('authors', []).flatMap(function (author) { return author.enrichments ? _.castArray(author.enrichments).flatMap(function (enrichment) { return enrichment.orcId ? [enrichment.orcId] : []; }) : []; })

path = authors forename & authors surname
value = get('authors', []).map(function (author) { return author.fullname; })

path = authors halAuthorId
value = get('authors', []).flatMap(function (author) { return author.halAuthorId ? [author.halAuthorId] : []; }).flatten()

path = authors idHal
value = get('authors', []).flatMap(function (author) { return author.idHal ? [author.idHal] : []; }).flatten()

path = authors idRef
value = get('authors', []).flatMap(function (author) { return author.idRef ? [author.idRef] : []; }).flatten()

path = authors isni
value = get('authors', []).flatMap(function (author) { return author.isni ? [author.isni] : []; }).flatten()

path = authors orcId
value = get('authors', []).flatMap(function (author) { return author.orcId ? [author.orcId] : []; }).flatten()

path = authors researcherId
value = get('authors', []).flatMap(function (author) { return author.researcherId ? [author.researcherId] : []; }).flatten()

path = authors viaf
value = get('authors', []).flatMap(function (author) { return author.viaf ? [author.viaf] : []; }).flatten()

path = bibCode
value = get("bibCode", "")

path = cern
value = get("cern", "")

path = classification hal code
value = get("classifications.enrichments.hal.code", "")

path = classification hal en
value = get("classifications.enrichments.hal.en", "")

path = classification hal fr
value = get("classifications.enrichments.hal.fr", "")

path = documentType
value = get("originalGenre", "")

path = doi
value = get("doi", "")

path = duplicates source
value = get("origins.sources", [])

path = duplicates sourceUid
value = get("sourceUids", [])

path = eisbn
value = get("host.eisbn", "")

path = eissn
value = get("host.eissn", "")

path = electronicPublicationDate
value = get("host.electronicPublicationDate", "")

path = enrichments classifications hal
value = get("classifications.enrichments.hal", {})

path = enrichments oa unpaywall has_repository_copy
value = get("enrichments.openAccess.unpaywall.has_repository_copy", "n/a")

path = enrichments oa unpaywall host_type
value = get("enrichments.openAccess.unpaywall.oa_locations", []).flatMap(location => location.host_type ? [location.host_type] : []).uniq()

path = enrichments oa unpaywall is_oa
value = get("enrichments.openAccess.unpaywall.is_oa", "n/a")

path = enrichments oa unpaywall oa_status
value = get("enrichments.openAccess.unpaywall.oa_status", "n/a")

path = fulltextUrl
value = get("fulltextUrl", "")

path = funders grantNumber
value = get("funders", []).map(f => f.grantNumber)

path = funders name
value = get("funders", []).map(f => f.name)

path = halId
value = get("halId", "")

path = hasDoi
value = get("doi", "").thru(Boolean)

path = hasFulltext
value = get("fulltextUrl", "").thru(Boolean)

path = idChain
value = get("business.sourceUidChain", "")

path = idProdinra
value = get("idProdinra", "")

path = irstea
value = get("irstea", "")

path = isbn
value = get("host.isbn", "")

path = issn
value = get("host.issn", "")

path = issue
value = get("host.issue", "")

path = keywords en author
value = get("keywords.en.author", [])

path = keywords en mesh
value = get("keywords.en.mesh", [])

path = keywords fr author
value = get("keywords.fr.author", [])

path = keywords fr mesh
value = get("keywords.fr.mesh", [])

path = keywords fr rameau
value = get("keywords.fr.rameau", [])

path = keywords undetermined author
value = get("keywords.und.author", [])

path = language
value = get("host.language", [])

path = nnt
value = get("nnt", "")

path = oatao
value = get("oatao", "")

path = okina
value = get("okina", "")

path = otherNumber
value = get("host.otherNumber", "")

path = pageRange
value = get("host.pages").castArray().flatMap(page => page && page.range ? [page.range] : [])

path = part
value = get("host.part", "")

path = pii
value = get("pii", "")

path = pmId
value = get("pmId", "")

path = ppn
value = get("ppn", "")

path = publicationDate
value = get("host.publicationDate", "")

path = publisher
value = get("host.publisher", "")

path = sourceUids identifiers
value = get("business.sourceUidChain", "").split("!").filter(s => s !== "")

path = specialIssue
value = get("host.specialIssue", "")

path = supplement
value = get("host.supplement", "")

path = thesisAdvisor forename
value = get("host.editor", []).filter({roles: "thesisAdvisor"}).map('forename')

path = thesisAdvisor idRef
value = get("host.editor", []).filter({roles: "thesisAdvisor"}).map('idRef')

path = title default
value = get("title.default", "")

path = title en
value = get("title.en", "")

path = title fr
value = get("title.fr", "")

path = title source
value = get("host.title", "")

path = title meeting
value = get("host.conference.name", "")

path = typeConditor
value = get("business.duplicateGenre", "")

path = volume
value = get("host.volume", "")

[assign]
path = authors affiliations rnsr concat
value = get("authors affiliations rnsr initial").map((initial, i) => initial.concat(self["authors affiliations rnsr enrichments"][i]))

# Often, sourceUids (used for "duplicates sourceUid") has only one element,
# whereas sourceUidChain (used for "sourceUids identifiers") contains several
# ids.
; path = isDuplicate
; value = get("duplicates sourceUid", []).thru(a => a.length > 1)

path = isDuplicate
value = get("sourceUids identifiers", []).thru(a => a.length > 1)

[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]
