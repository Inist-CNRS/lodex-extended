extension = json
mimeType = application/json

[use]
plugin = istex
plugin = lodex
plugin = basics

[ISTEXUnzip]

[env]
path = CATS_WOS_NOM
value = get('categories.wos').filter(function is2(cat) { return cat.startsWith('2 - ') })

[replace]
path = Titre
value = get('title')

path = fix('Auteur(s)')
value = get('author').map('name')

path = fix('Affiliation(s)')
value = get('author').map('affiliations').filter(Boolean).map(function (b) { return b.filter(Boolean).filter(function(a) { return (a.search(/^E-mail:/) === -1 && a.search(/^Correspondence address:/) === -1) });})

path = Revue ou monographie
value = get('host.title')

; path = fix('Auteur(s) monographie')
; value = get('host.author').map('name')

path = ISSN
value = get('host.issn').head()

path = e-ISSN
value = get('host.eissn', _.get(self, 'serie.eissn')).head()

path = ISBN
value = get('host.isbn').head()

path = e-ISBN
value = get('host.eisbn').head()

; new V3 : autres précisions bibliographiques :
path = Volume
value = get('host.volume')

path = Numéro
value = get('host.issue')

path = Chapitre
value = get('chapterId')

path = Page début
value = get('host.pages.first')

path = Page fin
value = get('host.pages.last')

path = Nombre de pages
value = get('host.pages.total')

; fin ajouts bibliogr V3


path = Éditeur
value = get('corpusName')
; forme appauvrie, à suivre

; new V3:
path = Éditeur scientifique
value = get('editor')
; il est aussi dans host.editor.
; liste des clés : on peut avoir : editor.name et editor.affiliation()

path = Type de publication
value = get('host.genre').head()

path = Type de document
value = get('genre').head()

; NEW V3
path = Nom de la conférence
value = get('host.conference.name')

path = erratum de
value = get('erratumOf')
;----------------------
path = Date de publication
value = get('publicationDate')

path = fix('Langue(s) du document')
value = get('language').head()

path = Résumé
value = get('abstract')
; l'API et dl.ixtex rendent en plus un @lang

path = Mots-clés d’auteur
value = get('subject').map('value')
; l'API et dl.ixtex rendent en plus un @lang

; V3 :
path = Mots-clés revue/monographie
value = get('host.subject')

path = Titre de la série
value = get('serie.title')

path = fix('Volume (série)')
value = get('serie.volume')

path = fix('Numéro (série)') 
value = get('serie.issue')

path = Catégories WoS
value = env('CATS_WOS_NOM').map(function createCat(nom) { return { Nom: nom, Classification: _.get(self, 'categories.wos.0'), Outils:  ['multicat'] } })

path = Catégories Science-Metrix.0.Nom
value = get('categories.scienceMetrix').last()

path = Catégories Science-Metrix.0.Classification
value = get('categories.scienceMetrix').slice(0, -1)

path = Catégories Science-Metrix.0.Outils.0
value = multicat

path = Catégories INIST.0.Nom
value = get('categories.inist').last()

path = Catégories INIST.0.Classification
value = get('categories.inist').slice(0, -1)

path = Catégories INIST.0.Outils.0
value = nb

path = Catégories Scopus
value = get('categories.scopus').chunk(3).map(function(categories) { return { Nom: categories[2], Classification: _.slice(categories, 0, 2), Outils: ['multicat'] } } )

; ajout V3, enrichissements 
path = fix('Mots-clés (teeft)')
value = get('keywords.teeft')

path = fix('Mots-clés (keyterm)')
value = get ('keywords.keyterm')
; (pas encore disponibles)

path = fix('Entités nommées (Unitex)')
value = get('namedEntities.unitex')



; NB : dans la liste, "enrichments.*.*"", ex :"enrichments.grobid.mimetype" donne l'URL des fichiers TEI enrichis.

; liste des outils utilisés :
path = Outils d’enrichissement.type
value = get('enrichments.type')
; ---- fin ------
path = Score qualité
value = get('qualityIndicators.score')

path = Version PDF
value = get('qualityIndicators.pdfVersion')

; V3 : indicateurs divers
path = Nb mots PDF
value = get('qualityIndicators.pdfWordCount')

path = Nb caractères PDF
value = get('qualityIndicators.pdfCharCount')

path = Nb pages PDF
value = get('qualityIndicators.pdfPageCount')

path = Taille pages PDF
value = get('qualityIndicators.pdfPageSize')

path = Nb mots du résumé
value = get('qualityIndicators.abstractWordCount')

path = Nb caractères du résumé
value = get('qualityIndicators.abstractCharCount')

path = Nb mots-clés
value = get('qualityIndicators.keywordCount')

; refBibsNative : true/false 
path = Références biblio natives
value = get('qualityIndicators.refBibsNative')
; ---- fin ajouts -------------------------------------------

path = XML structuré
value = fix('n/a')
; à finaliser plus tard

path = Identifiant ISTEX
value = get('id')
; n'est pas disponible dans dl

path = ARK
value = get('arkIstex')

path = DOI
value = get('doi').head()

path = PMID
value = get('pmid')

; NEW V3:
path = DOI Revue/Monographie
value = ('host.doi')

path = SICI
value = get('sici')
; 0 niveau host ou serie

path = PII
value = get('pii')
path = PII
value = get('host.pii')
path = PII
value = get('serie.pii')

; new V3 :
path = Références bibliographiques
value = get('refBibs')



[objects2columns]

[standardize]

# Seulement pour le développement
# [JSONString]

